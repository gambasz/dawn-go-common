package audit

import (
	"context"
	"fmt"
	"time"

	"github.com/spf13/viper"
	"github.com/tgs266/dawn-go-common/common"
)

type AuditTransaction struct {
	collectionName string
	record         *AuditRecord
	session        *common.DBSession
	ctx            common.DawnCtx
}

type AuditRecord struct {
	// autogenerated
	ID string `json:"id" bson:"_id"`
	// autogenerated
	Timestamp  time.Time `json:"timestamp" bson:"timestamp"`
	Collection string    `json:"collection" bson:"collection"`
	RequestId  string    `json:"requestId" bson:"requestId"`

	EntityID string                 `json:"entityId" bson:"entityId"`
	Action   AuditAction            `json:"type" bson:"type"`
	Details  map[string]interface{} `json:"details" bson:"details"`
	Actor    string                 `json:"actor" bson:"actor"`
}

func (tx *AuditTransaction) Ctx(ctx common.DawnCtx) *AuditTransaction {
	tx.ctx = ctx
	return tx
}

func (tx *AuditTransaction) Action(v AuditAction) *AuditTransaction {
	tx.record.Action = v
	return tx
}

func (tx *AuditTransaction) RequestId(v string) *AuditTransaction {
	tx.record.RequestId = v
	return tx
}

func (tx *AuditTransaction) RequestIdFromCtx() *AuditTransaction {
	tx.record.RequestId = tx.ctx.FiberCtx.Locals("requestId").(string)
	return tx
}

func (tx *AuditTransaction) Actor(v string) *AuditTransaction {
	tx.record.Actor = v
	return tx
}

func (tx *AuditTransaction) ActorFromCtx() *AuditTransaction {
	if common.ConfigName == "local" {
		tx.record.Actor = "LOCAL"
	} else {
		tx.record.Actor = tx.ctx.GetUserId()
	}
	return tx
}

func (tx *AuditTransaction) AddDetail(name string, value interface{}) *AuditTransaction {
	tx.record.Details[name] = value
	return tx
}

func (tx *AuditTransaction) EntityID(v string) *AuditTransaction {
	tx.record.EntityID = v
	return tx
}

func (tx *AuditTransaction) validate() {
	if tx.record.Actor == "" {
		panic("audit record actor field must be filled")
	}
	if tx.record.Action == "" {
		panic("audit record action field must be filled")
	}
}

func (tx *AuditTransaction) Store() {
	go func() {
		defer func() {
			if r := recover(); r != nil {
				if viper.GetBool("logging.audit.warn") {
					fmt.Printf("WARNING: audit logging failed. Error: %v\n", r)
				}
			}
		}()
		tx.validate()
		_, err := tx.session.DB.Collection("audit").InsertOne(context.TODO(), tx.record)
		if err != nil {
			panic(err)
		}
	}()
}
